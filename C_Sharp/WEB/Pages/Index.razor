@page "/"
@inject IConfiguration Configuration
@inject HttpClient httpClient

<PageTitle>Photo Upload</PageTitle>

<h1>Welcome to the Photo Library!</h1>

<InputFile OnChange="@OnInputFileChange" multiple />

@if (uploadedFiles.Any())
{
    <button @onclick="UploadFiles">Upload</button>
}

@if (!string.IsNullOrEmpty(uploadStatus))
{
    <p class="@statusClass">@uploadStatus</p>
}

<ul>
@foreach (var file in uploadedFiles)
{
    <li>@file.Name</li>
}
</ul>

@code {
    private List<IBrowserFile> uploadedFiles = new List<IBrowserFile>();
    private string uploadStatus = "";
    private string statusClass = "";
    private string apiUrl;

    // Inject the HttpClient service provided by Blazor
    [Inject]
    private HttpClient HttpClient { get; set; }

    protected override void OnInitialized()
    {
        apiUrl = Configuration["photo_process_url"]; // Ensure this is set in your configuration
        base.OnInitialized();
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        uploadedFiles.AddRange(e.GetMultipleFiles());
        uploadStatus = ""; // Reset the status message when new files are selected
        statusClass = "";
    }

    private async Task UploadFiles()
    {
        foreach (var file in uploadedFiles)
        {
            var content = new MultipartFormDataContent();
            var stream = file.OpenReadStream(maxFileSize: 10485760); // 10 MB size limit
            var fileContent = new StreamContent(stream);
            content.Add(fileContent, "file", file.Name);

            try
            {
                var response = await HttpClient.PostAsync(apiUrl, content);

                if (response.IsSuccessStatusCode)
                {
                    uploadStatus = "Upload successful!";
                    statusClass = "success";
                }
                else
                {
                    uploadStatus = "Upload failed. Please try again.";
                    statusClass = "error";
                }
            }
            catch (HttpRequestException e)
            {
                uploadStatus = $"Error: {e.Message}";
                statusClass = "error";
            }
            finally
            {
                await stream.DisposeAsync(); // Dispose of the stream after use
            }

            // Clear the uploaded files list and reset status
            uploadedFiles.Clear();
            uploadStatus = ""; 
            statusClass = "";
        }
    }
}

<style>
    .success {
        color: green;
    }
    .error {
        color: red;
    }
</style>
