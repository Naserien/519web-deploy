@page "/"

<PageTitle>Photo Upload</PageTitle>

<h1>Welcome to the Photo Library!</h1>

<InputFile OnChange="@OnInputFileChange" multiple />

@if (uploading)
{
    <p>Uploading...</p>
}
else if (uploadedFiles.Any())
{
    <button @onclick="UploadFiles">Upload</button>
    <ul>
    @foreach (var file in uploadedFiles)
    {
        <li>@file.Name</li>
    }
    </ul>
}

@if (!string.IsNullOrEmpty(uploadResultMessage))
{
    <p class="@resultMessageClass">@uploadResultMessage</p>
}

@code {
    private List<IBrowserFile> uploadedFiles = new List<IBrowserFile>();
    private string uploadResultMessage = "";
    private string resultMessageClass = "";
    private bool uploading = false;
    
    @inject IConfiguration Configuration;
    @inject HttpClient httpClient; // Ensure HttpClient is injected via DI

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        uploadedFiles.AddRange(e.GetMultipleFiles());
        uploadResultMessage = ""; // Clear any previous messages
    }

    private async Task UploadFiles()
    {
        uploading = true;
        var photoProcessUrl = Configuration["photo_process_url"];

        foreach (var file in uploadedFiles)
        {
            var content = new MultipartFormDataContent();
            var stream = file.OpenReadStream(10485760); // Set a limit to file size (10MB here)
            var fileContent = new StreamContent(stream);

            content.Add(fileContent, "file", file.Name);

            try
            {
                var response = await httpClient.PostAsync(photoProcessUrl, content);

                if (response.IsSuccessStatusCode)
                {
                    uploadResultMessage = $"{file.Name} uploaded successfully!";
                    resultMessageClass = "success";
                }
                else
                {
                    uploadResultMessage = $"{file.Name} failed to upload.";
                    resultMessageClass = "error";
                }
            }
            catch (Exception ex)
            {
                uploadResultMessage = $"Error: {ex.Message}";
                resultMessageClass = "error";
            }
            finally
            {
                await stream.DisposeAsync();
            }
        }

        uploading = false;
        uploadedFiles.Clear(); // Optionally clear the list after upload
    }
}

<style>
    .success {
        color: green;
    }
    .error {
        color: red;
    }
</style>
